/*!
 ***************************************************************************************
 *
 *  Copyright ? 2017-2018 yifneg. All Rights Reserved.
 *
 * \file      EventDeal.h
 * \author    yifeng
 * \version   1.0
 * \date      2023年7月6日
 * \brief     事件处理的头文件  
 *
 *--------------------------------------------------------------------------------------
 * \attention
 *
 *
 ***************************************************************************************
 */

/*****************************************************************************************
 change history: 
    1.date  : 2023年7月6日
      author: yifeng
      change: create file

*****************************************************************************************/


/*=======================================================================================
下面两条指令是本头文件条件编译的预处理指令，用于防止本头文件被其他文件重复引用。
=======================================================================================*/
#ifndef __EventDeal_H__
#define __EventDeal_H__



/*========================================================================================
                                 本源程序包括的头文件                                     
建议：包含本项目的文件使用 #include "文件名.扩展名"，                                   
      包含系统库的文件使用 #include <文件名.扩展名> 。                                    
========================================================================================*/
#include "Main.h"


/*=======================================================================================
下面这三条指令是用于区分编译系统为 C++ 或 C 的预处理指令。                               
"__cplusplus" 为 C++ 预处理器名字，这三条指令表明接在其下面的那些指令为 C 程序特征.      
=======================================================================================*/
#ifdef __cplusplus
extern "C" {
#endif


/*=======================================================================================
                               系统运行的各类字符化常数定义                             
=======================================================================================*/
/*---------------------------------------------------------------------------------------
为了做到较好的软件可移植性，推荐用户在编程时使用下面定义的数据类型大小
---------------------------------------------------------------------------------------*/
#define cEventCodeNum             10

/*---------------------------------------------------------------------------------------
的字符化常数定义：
----------------------------------------------------------------------------------------*/


/*=======================================================================================
                      各类字符化常数和硬件设计相关的输入／输出引脚定义
=======================================================================================*/
/*--------------------------------------------------------------------------------------
的输入／输出引脚定义：
--------------------------------------------------------------------------------------*/


/*======================================================================================
                             全局变量数据结构类型定义
======================================================================================*/
/*--------------------------------------------------------------------------------------
的全局数据结构类型定义 ：  
--------------------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------------------   
  报警事件警情代码与对应的 AL 电话通讯协议事件代码 （XYZ）的全局数据结构类型定义：   
--------------------------------------------------------------------------------------*/  
typedef enum
{
  EnAcNoAlarm       =  0x00          ,// 空   
  EnAcSosAlarm                       ,// 一键紧急报警
  EnAcUserCancel                     ,// 用户取消         
} AlarmCodeEnum;


typedef enum
{
  EnAtSystemAlarm =  0x00           ,// 系统/主机                         
  EnAtUserAlarm                     ,// 用户                         
  EnAtZoneAlarm                     ,// 防区     
  EnAtRFIDAlarm                     ,// RFID
  EnAtKeypadAlarm                   ,// 键盘                         
  EnAtModuleAlarm                   ,// 模块 
  EnAtSirenAlarm                    ,// 警号
  EnAtRelayAlarm                    ,// 继电器
  EnAtTipAlarm                      ,// 提示
}AlarmTypeEnum;
 
typedef enum
{
  EnAlArmDisarm =  0x01            ,// 布撤防警情      
  EnAlSystem                       ,// 系统警情                         
  EnAlAlarm                         // 报警警情     
}AlarmListEnum;


typedef struct   
{   
  AlarmCodeEnum    Code;              // 报警事件警情代码   
  unsigned short   Event;             // CID 电话通讯协议事件代码 （ＢＣＤ 码）   
  AlarmTypeEnum    Type;              // 警情类型   
  AlarmListEnum    List;              // 警情分类   
} AlarmHYStru;  


typedef struct  
{ 
  AlarmCodeEnum    AlarmEnum;      // 警情枚举 
  AlarmListEnum    List;           // 警情分类
  unsigned char    YearL;           // 年 
  unsigned char    Month;          // 月  
  unsigned char    Day;            // 日  
  unsigned char    Hour;           // 时  
  unsigned char    Minute;         // 分  
  unsigned char    Second;         // 秒  
  AlarmTypeEnum    Type;           // 警情类型 
  unsigned short   AlarmCode;      // 报警代码  
  unsigned char    Aear;           // 分区
  unsigned short   Zone;           // 事件防区号  
}EventFormatStru;  


typedef struct 
{
  unsigned char    YearL;           // 年 
  unsigned char    Month;          // 月  
  unsigned char    Day;            // 日  
  unsigned char    Hour;           // 时  
  unsigned char    Minute;         // 分  
  unsigned char    Second;         // 秒  
}EventDateTimeStru;


typedef struct  
{  
  unsigned char   Front;                    // 当前事件指针  
  unsigned char   Rear;                     // 显示事件指针  
  unsigned char   CurrentPtr;               // 当前事件指针
  unsigned char   EventCnt;                 // 事件个数

  EventFormatStru EventCode[cEventCodeNum];      

  EventDateTimeStru  DateTime;
} EventPtrStru;   


/*=======================================================================================
                                         全局常量声明                                    
=======================================================================================*/
/*---------------------------------------------------------------------------------------
的全局常量声明：
---------------------------------------------------------------------------------------*/


/*=======================================================================================
                                         全局变量声明                                    
=======================================================================================*/
/*---------------------------------------------------------------------------------------
的全局变量声明：
---------------------------------------------------------------------------------------*/
extern EventPtrStru gstvEvent;

/*=======================================================================================
                                 源程序文件中的函数原型声明
=======================================================================================*/


/*!
 * \fn     EventDeal_Init
 * \brief  事件初始化
 *          
 * \param  [in] void   #
 * 
 * \retval void
 */
void EventDeal_Init(void);


/**
 *  函数名称：GetDateTime
 *  功能描述：取当前系统日期和时间
 *
 *  输出参数：char * psDateTime -- 系统日期时间,格式为yyymmddHHMMSS
 *  返回结果：0 -> 成功
 */
int EventGetDateTime(char *psDateTime);

/*!
 * \fn     EventDateTimeConvToBCD
 * \brief  把时间转成BCD编码
 *          
 * \param  [in] void   #
 * 
 * \retval int
 */
int EventDateTimeConvToBCD(void);



/*!
 * \fn     EventCodeWriteAlarmToEvent
 * \brief  写事件
 *          
 * \param  [in] unsigned char          Code   # 警情类型  
 * \param  [in] u8                 ZoneUser   #
 * 
 * \retval void
 */
void EventCodeWriteAlarmToEvent(AlarmCodeEnum Code, unsigned char ZoneUser);  


/*!
 * \fn     EventWriteDataToEeprom
 * \brief  写事件到历史事件缓存处理
 *          
 * \param  [in] void       *pSrouce   #
 * 
 * \retval void
 */
void EventWriteDataToEeprom(EventFormatStru *pSrouce); 

/*!
 * \fn     EventReadDataToEeprom
 * \brief  读取历史事件处理。
 *          
 * \param  [in] void           *pObject   #
 * \param  [in] u16              Front    #
 * 
 * \retval void
 */
void EventReadDataToEeprom(EventFormatStru          *pObject,        
                                     unsigned short Front      
                                    );




/*=======================================================================================
下面这三条指令是用于与上面三条区分编译系统为 C++ 或 C 的预处理指令相对应。用于指定
 extern "C" 链接指示符作用域，此处的"}"与上面的"{"相对应，为链接指示符作用结束符。
=======================================================================================*/
#ifdef __cplusplus
}
#endif

#endif
/*
*****************************************************************************************
                                 本Ｃ语言源程序文件到此结束
*****************************************************************************************
*/


